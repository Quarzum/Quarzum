#pragma once

enum TokenType {
    // 0x0 => Keywords
    int_k       = 0x001,
    num_k       = 0x002,
    str_k       = 0x003,
    char_k      = 0x004,
    bool_k      = 0x005,
    var_k       = 0x006,
    uint_k      = 0x007,
    byte_k      = 0x008,
    return_k    = 0x009,
    function_k  = 0x00a,
    enum_k      = 0x00b,
    const_k     = 0x00c,
    exit_k      = 0x00d,
    out_k       = 0x00e,
    input_k     = 0x00f,
    struct_k    = 0x010,
    if_k        = 0x011,
    else_k      = 0x012,
    for_k       = 0x013,
    foreach_k   = 0x014,
    while_k     = 0x015,
    do_k        = 0x016,
    break_k     = 0x017,
    continue_k  = 0x018,
    repeat_k    = 0x019,
    try_k       = 0x01a,
    catch_k     = 0x01b,
    finally_k   = 0x01c,
    throw_k     = 0x01d,
    module_k    = 0x01e,
    import_k    = 0x01f,
    class_k     = 0x020,
    public_k    = 0x021,
    private_k   = 0x022,
    short_k     = 0x023,
    long_k      = 0x024,
    async_k     = 0x025,
    await_k     = 0x026,
    true_k      = 0x027,
    false_k     = 0x028,
    // 0x1 => Special tokens
    id          = 0x000,
    // 0x2 => Symbols
    eq          = 0x201,
    left_par    = 0x202,
    right_par   = 0x203,
    not_bit     = 0x204,
    and_bit     = 0x205,
    or_bit      = 0x206,
    xor_bit     = 0x207,
    not_s       = 0x208,
    and_s       = 0x209,
    or_s        = 0x20a,
    xor_s       = 0x20b,
    point       = 0x20c,
    comma       = 0x20d,
    plus        = 0x20e,
    minus       = 0x20f,
    prod        = 0x210,
    division    = 0x211,
    power       = 0x212,
    left_cb     = 0x213,
    right_cb    = 0x214,
    left_sb     = 0x215,
    right_sb    = 0x216,
    semicolon   = 0x217,
    greater     = 0x218,
    less        = 0x219,
    is_equal    = 0x21a,
    greater_eq  = 0x21b,
    less_eq     = 0x21c,
    remainder   = 0x21d,
    plus_eq     = 0x21e,
    plus_unary  = 0x21f,
    minus_eq    = 0x220,
    minus_unary = 0x221,
    prod_eq     = 0x222,
    div_eq      = 0x223,
    rem_eq      = 0x224,
    pow_eq      = 0x225,
    endl        = 0x226,
    // 0x3 => Literals
    int_lit     = 0x301,
    num_lit     = 0x302,
    str_lit     = 0x303,
    bool_lit    = 0x304,
    char_lit    = 0x305,
    byte_lit    = 0x306,
    uint_lit    = 0x307,

    err         = 0x400
};

struct Token {
    TokenType type;
    string value;
};