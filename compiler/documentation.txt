DATA TYPES
----------

This is the list of the different data types:

int
number
bool
string
function
any
null
undefined

CONSTANTS
---------

To make a variable constant just put the "const" keyword like this example:

const any myVar = 12;

myVar = 2; // ERROR

COMMENTS
--------

There are two ways to create comments:
    * Single line comments: using "//" + comment
    * Multiline comments: using "/#" + comment + "#/"

FUNCTIONS
----------

    * Value-return functions:

    They need to specificate the value and must have a return keyword (if there are no arguments the parentheses are not required):

        int sum(int a, int b){
            return a + b;
        }
        bool is_equal(any a, any b){
            return a == b;
        }
        any three{
            return 3;
        }

    * No-value functions:

    It doesn't return a value (if there are no arguments the parentheses are not required):

        function sum(int a, int b){
            console.out(a + b);
        }


MODULES
--------

Modules are exportable code fragments, such as functions, variables or classes. Example:

// In math.n
module Math{
    const number PI = 3.1415926;
    function sum(number a, number b){
        return a + b;
    }
}
// In code.n
import Math from "math.n";

COMPILER TOKENS
---------------

* Symbols:
    equal (=)
    semi (;)
    point (.)
    quotes (", ')
    curly_open ({)
    curly_close (})
    square_open ({)
    square_close (})
    is_equal (==)
    is_equivalent (===)
    is_nequal (!=)
    is_nequivalent (!==)
    is_greater (>)
    is_greater_equal (>=)
    is_lower (<)
    is_lower_equal (<=)
    plus (+)
    unary_plus (++)
    minus (-)
    unary_minus (--)
    multi (*)
    divide (/)
    power (^)
    module (%)
    plus_equal (+=)
    minus_equal (-=)
    multi_equal (*=)
    divide_equal (/=)
    power_equal (^=)
    comment_single (//)
    comment_open (/#)
    comment_close (#/)
    par_open (()
    par_close ())

* Keywords:
    return
    const
    not
    and
    or
    import
    module
    from
    if
    else
    while
    for
    in
    enum
    class
    public
    private

* Data types
    int, intv
    number, numberv
    string, stringv
    null
    bool, true, false
    function
    any, anyv

* Identifiers
    identifier
    comment


NODES 
-------

ExitNode:   EXIT ExpressionNode SEMI
                    INTV
                    value